<?xml version="1.0"?>

<launch>
	<!-- The planning and execution components of MoveIt! configured to run -->
	<!-- using the ROS-Industrial interface. -->

	<!-- Non-standard joint names:
       - Create a file [robot_moveit_config]/config/joint_names.yaml
           controller_joint_names: [joint_1, joint_2, ... joint_N]
       - Update with joint names for your robot (in order expected by rbt controller)
       - and uncomment the following line: -->
  	
	<rosparam command="load" file="$(find myworkcell_moveit_config)/config/joint_names.yaml"/>

	<!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
	<!--  - if sim=false, a robot_ip argument is required -->
	<arg name="sim" default="false" />
	<arg name="robot_ip" unless="$(arg sim)" default="192.168.12.59"/>
	<arg name="limited" default="false"/>
	<arg name="gripper_usb" default="/dev/ttyUSB0" />

	<!-- load the robot_description parameter before launching ROS-I nodes -->
	<include file="$(find myworkcell_moveit_config)/launch/planning_context.launch" >
		<arg name="load_robot_description" value="true" />
	</include>

	<!-- run the robot simulator and action interface nodes -->
	<group if="$(arg sim)">
		<include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
	</group>

	<!-- run the "real robot" interface nodes -->
	<!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
	<!--   - replace these calls with appropriate robot-specific calls or launch files -->
	<group unless="$(arg sim)">
		<remap from="joint_trajectory_action" to="follow_joint_trajectory"/>
		<include file="$(find ur_modern_driver)/launch/ur_common.launch" >
	      		<arg name="robot_ip" value="$(arg robot_ip)"/>
	      		<arg name="min_payload" value="0.0"/>
	      		<arg name="max_payload" value="5.0"/>
	        </include>

		<node name="CModelTcpNode" pkg="robotiq_c_model_control" type="CModelRtuNode.py" args="$(arg gripper_usb)" output="screen" />
		<node name="CModelControl" pkg="robotiq_c_model_control" type="CModelSimpleController.py" output="screen" />
	</group>

	<!-- publish the robot state (tf transforms) -->
  	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

	<include file="$(find myworkcell_moveit_config)/launch/move_group.launch">
		<arg name="publish_monitored_planning_scene" value="true" />
	</include>

	<include file="$(find myworkcell_moveit_config)/launch/moveit_rviz.launch">
		<arg name="config" value="true"/>
	</include>

</launch>
